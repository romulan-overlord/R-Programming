setwd("D:/Study/MSC/sem2/Regression Methods")
data = read.csv("Walmart.csv")
View(data)
View(data)
data.head()
data.head
print(data)
librray(caTools)
library(caTools)
View(data)
View(data)
print(regressor)
set.seed(123)
split = sample.split(data$Weekly_Sales, SplitRatio = 0.8)
training_set = subset(data, split==TRUE)
test_set = subset(data, split == FALSE)
regressor = lm(formula = Weekly_Sales ~ ., data = training_set)
print(regressor)
ypred = predict(regressor, newdata = training_set)
print(ypred)
y_pred_train = predict(regressor, newdata = training_set)
# Get test predictions
y_pred_test = predict(regressor, newdata = test_set)
# Calculate accuracy metrics
# Mean Squared Error (MSE)
mse = mean((test_set$Weekly_Sales - y_pred_test)^2)
# Root Mean Squared Error (RMSE)
rmse = sqrt(mse)
# R-squared
r_squared = summary(regressor)$r.squared
# Adjusted R-squared
adj_r_squared = summary(regressor)$adj.r.squared
# Print accuracy metrics
cat("Mean Squared Error (MSE): ", mse, "\n")
cat("Root Mean Squared Error (RMSE): ", rmse, "\n")
cat("R-squared:", r_squared, "\n")
cat("Adjusted R-squared:", adj_r_squared, "\n")
ape = abs((test_set$Weekly_Sales - y_pred_test) / test_set$Weekly_Sales) * 100
mape = mean(ape)
cat("Mean Absolute Percentage Error (MAPE): ", mape, "%", "\n")
data = read.csv("Walmart.csv")
library(caTools)
set.seed(123)
split = sample.split(data$Weekly_Sales, SplitRatio = 0.8)
training_set = subset(data, split==TRUE)
test_set = subset(data, split == FALSE)
training_set_normalized = scale(training_set[,-1], scale = FALSE)
training_set_normalized = scale(training_set[,-1], scale = FALSE)
data.drop("Date")
new_data = subset(data, select = -"Date")
new_data = subset(data, select = -data$Date)
new_data = subset(data, select = ["Store"])
new_data = subset(data, select = "Store")
new_data = subset(data, select = "Store, Temperature")
data$year = as.numeric(format(data$Date, "%Y"))
data$month = as.numeric(format(data$Date, "%m"))
data$day = as.numeric(format(data$Date, "%d"))
str(data$Date)
data$year = as.numeric(substr(data$Date, 1, 4))
data$year = as.numeric(substr(data$Date, 6, 10))
View(data)
View(data)
data$year = as.numeric(substr(data$Date, 7, 10))
View(data)
View(data)
data$month = as.numeric(substr(data$Date, 4,5))
data$date = as.numeric(substr(data$Date, 1,2))
library(caTools)
set.seed(123)
new_data = subset(data, select = -c("Date"))
new_data = data[, -which(names(df) == "Date")]
View(new_data)
View(new_data)
View(new_data)
new_data = data[., -which(names(df) == "Date")]
Date
new_data = subset(data, select = -c(Date))
library(caTools)
set.seed(123)
library(caTools)
set.seed(123)
split = sample.split(data$Weekly_Sales, SplitRatio = 0.8)
training_set = subset(data, split==TRUE)
test_set = subset(data, split == FALSE)
training_set_normalized = scale(training_set[,-1], scale = FALSE)
split = sample.split(new_data$Weekly_Sales, SplitRatio = 0.8)
training_set = subset(new_data, split==TRUE)
test_set = subset(new_data, split == FALSE)
training_set_normalized = scale(training_set[,-1], scale = FALSE)
View(training_set_normalized)
View(training_set_normalized)
data_normalized = scale(new_data[,-1], scale = FALSE)
library(caTools)
set.seed(123)
View(data_normalized)
View(data_normalized)
data_normalized = scale(new_data[,-1], scale = TRUE)
View(data_normalized)
View(data_normalized)
split = sample.split(data_normalized$Weekly_Sales, SplitRatio = 0.8)
str(data_normalized)
data_normalized = scale(new_data[,-1], center=min, scale = max-min)
data_normalized = scale(new_data[,-1], center=TRUE, scale = FALSE)
library(caTools)
set.seed(123)
split = sample.split(data_normalized$Weekly_Sales, SplitRatio = 0.8)
str(data_normalized)
str(data)
data_normalized = data.frame(scale(new_data[,-1], center=TRUE, scale = FALSE))
str(data_normalized)
data_normalized = data.frame(scale(new_data[,-1], center=TRUE, scale = FALSE))
split = sample.split(data_normalized$Weekly_Sales, SplitRatio = 0.8)
training_set = subset(new_data, split==TRUE)
test_set = subset(new_data, split == FALSE)
regressor = lm(formula = Weekly_Sales ~ ., data = training_set)
print(regressor)
y_pred_train = predict(regressor, newdata = training_set)
# Get test predictions
y_pred_test = predict(regressor, newdata = test_set)
# Calculate accuracy metrics
# Mean Squared Error (MSE)
mse = mean((test_set$Weekly_Sales - y_pred_test)^2)
# Root Mean Squared Error (RMSE)
rmse = sqrt(mse)
# R-squared
r_squared = summary(regressor)$r.squared
# Adjusted R-squared
adj_r_squared = summary(regressor)$adj.r.squared
# Print accuracy metrics
cat("Mean Squared Error (MSE): ", mse, "\n")
cat("Root Mean Squared Error (RMSE): ", rmse, "\n")
cat("R-squared:", r_squared, "\n")
cat("Adjusted R-squared:", adj_r_squared, "\n")
training_set = subset(data_normalized, split==TRUE)
test_set = subset(data_normalized, split == FALSE)
regressor = lm(formula = Weekly_Sales ~ ., data = training_set)
print(regressor)
y_pred_train = predict(regressor, newdata = training_set)
# Get test predictions
y_pred_test = predict(regressor, newdata = test_set)
# Calculate accuracy metrics
# Mean Squared Error (MSE)
mse = mean((test_set$Weekly_Sales - y_pred_test)^2)
# Root Mean Squared Error (RMSE)
rmse = sqrt(mse)
# R-squared
r_squared = summary(regressor)$r.squared
# Adjusted R-squared
adj_r_squared = summary(regressor)$adj.r.squared
# Print accuracy metrics
cat("Mean Squared Error (MSE): ", mse, "\n")
cat("Root Mean Squared Error (RMSE): ", rmse, "\n")
cat("R-squared:", r_squared, "\n")
cat("Adjusted R-squared:", adj_r_squared, "\n")
ape = abs((test_set$Weekly_Sales - y_pred_test) / test_set$Weekly_Sales) * 100
mape = mean(ape)
cat("Mean Absolute Percentage Error (MAPE): ", mape, "%", "\n")
y_pred_train[0]
display(y_pred_train[0])
print(y_pred_train[0])
View(data)
View(data)
data = read.csv("Walmart.csv")
# data$year = as.numeric(substr(data$Date, 7, 10))
# data$month = as.numeric(substr(data$Date, 4,5))
# data$date = as.numeric(substr(data$Date, 1,2))
new_data = subset(data, select = -c(Date))
data_normalized = data.frame(scale(new_data[,-1], center=TRUE, scale = FALSE))
View(data_normalized)
View(data_normalized)
data_normalized = data.frame(scale(new_data[,-1], center=TRUE, scale = FALSE))
View(data_normalized)
View(data_normalized)
split = sample.split(new_data$Weekly_Sales, SplitRatio = 0.8)
training_set = subset(new_data, split==TRUE)
test_set = subset(new_data, split == FALSE)
regressor = lm(formula = Weekly_Sales ~ ., data = training_set)
print(regressor)
y_pred_train = predict(regressor, newdata = training_set)
print(y_pred_train)
# Function to reverse min-max normalization
reverse_minmax = function(x, min_val, max_val) {
return (x * (max_val - min_val) + min_val)
}
# Example usage:
# Assuming data_normalized is your normalized dataframe
original_data = reverse_minmax(data_normalized, min(new_data[,-1]), max(new_data[,-1]))
View(original_data)
View(original_data)
data_normalized = data.frame(scale(new_data["Weekly_Sales"], center=TRUE, scale = FALSE))
View(data_normalized)
View(data_normalized)
# loading the walmart data
data = read.csv("Walmart.csv")
# Dropping the date column
new_data = subset(data, select = -c(Date))
split = sample.split(new_data$Weekly_Sales, SplitRatio = 0.8)
training_set = subset(new_data, split==TRUE)
test_set = subset(new_data, split == FALSE)
regressor = lm(formula = Weekly_Sales ~ ., data = training_set)
print(regressor)
library(ggplot2)
View(data)
View(data)
ggplot() +
y = training_set$Weekly_Sales),
ggplot() +
geom_point(aes(x = training_set$CPI,
y = training_set$Weekly_Sales),
colour = "red") +
geom_point(aes(x = training_set$CPI,
y = y_pred_train),
colour = "blue") +
ggtitle("Sick Plot") +
xlab("Years of Experience") +
ylab("Salary received")
ggplot() +
geom_point(aes(x = training_set$CPI,
y = training_set$Weekly_Sales),
colour = "red") +
geom_point(aes(x = training_set$CPI,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sick Plot") +
xlab("Years of Experience") +
ylab("Salary received")
ggplot() +
geom_point(aes(x = test_set$CPI,
y = test_set$Weekly_Sales),
colour = "red") +
geom_line(aes(x = test_set$CPI,
y = y_pred_test),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("Years of Experience") +
ylab("Salary Received")
y_pred_train = predict(regressor, newdata = training_set)
y_pred_test = predict(regressor, newdata = test_set)
ggplot() +
geom_point(aes(x = training_set$CPI,
y = training_set$Weekly_Sales),
colour = "red") +
geom_point(aes(x = training_set$CPI,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sick Plot") +
xlab("Years of Experience") +
ylab("Salary received")
ggplot() +
geom_point(aes(x = test_set$CPI,
y = test_set$Weekly_Sales),
colour = "red") +
geom_line(aes(x = test_set$CPI,
y = y_pred_test),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("Years of Experience") +
ylab("Salary Received")
ggplot() +
geom_point(aes(x = training_set$CPI,
y = training_set$Weekly_Sales),
colour = "red") +
geom_point(aes(x = training_set$CPI,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sick Plot") +
xlab("CPI") +
ylab("Weekly Sales")
ggplot() +
geom_point(aes(x = test_set$CPI,
y = test_set$Weekly_Sales),
colour = "red") +
geom_line(aes(x = test_set$CPI,
y = y_pred_test),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("CPI") +
ylab("Weekly Sales")
library(caTools)
library(ggplot2)
data = read.csv("heart.csv")
View(data)
View(data)
set.seed(123)
split = sample.split(data$target, SplitRatio = 0.7)
training_set = subset(data, split==TRUE)
test_set = subset(data, split==FALSE)
regressor = lm(formula = target ~ ., data = training_set)
print(regressor)
y_pred_train = predict(regressor, newdata = training_set)
ggplot() +
geom_point(aes(x = training_set$age,
y = training_set$target),
colour = "red") +
geom_line(aes(x = training_set$age,
y = y_pred_train),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("CPI") +
ylab("Weekly Sales")
ggplot() +
geom_point(aes(x = training_set$age,
y = training_set$target),
colour = "red") +
geom_plot(aes(x = training_set$age,
y = y_pred_train),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("CPI") +
ylab("Weekly Sales")
ggplot() +
geom_point(aes(x = training_set$age,
y = training_set$target),
colour = "red") +
geom_point(aes(x = training_set$age,
y = y_pred_train),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("CPI") +
ylab("Weekly Sales")
ggplot() +
geom_point(aes(x = training_set$age,
y = training_set$target),
colour = "red") +
geom_point(aes(x = training_set$age,
y = y_pred_train),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("Age") +
ylab("target")
ggplot() +
geom_point(aes(x = training_set$chol,
y = training_set$target),
colour = "red") +
geom_point(aes(x = training_set$chol,
y = y_pred_train),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("Age") +
ylab("target")
y_pred_test = predict(regressor, newdata = test_set)
ggplot() +
geom_point(aes(x = test_set$chol,
y = test_set$target),
colour = "red") +
geom_point(aes(x = test_set$chol,
y = y_pred_test),
colour = "blue") +
ggtitle("Prediction Plot") +
xlab("Cholesterol") +
ylab("target")
